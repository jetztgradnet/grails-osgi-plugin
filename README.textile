h1. Grails OSGi plugin

h2. About

The Grails OSGi plugin adds support to package and run a Grails application as an OSGi bundle. The bundle(s) may be run in an ad hoc assembled OSGi container or deployed to a external OSGi app server such as "SpringSource DM Server":http://www.springsource.org/dmserver, "Eclipse Virgo":http://eclipse.org/virgo/, or "Apache Karaf":http://karaf.apache.org/.

See also "Grails on OSGi":http://blog.jetztgrad.net/grails-on-osgi/ for details on running Grails applications in an OSGi environment.

h2. License

The OSGi plugin is released under the "Apache License 2.0":http://apache.org/licenses/LICENSE-2.0.txt.

h2. Installation

Simply call @grails install-plugin osgi@ to install the OSGi plugin

h2. Usage

h3. Creating an OSGi bundle from the Grails application

@grails bundle@
@grails prod bundle@ 

h3. Running the bundle

@grails run-bundle@
@grails prod run-bundle@

*Note*: at first start the OSGi runtime is assembled, which may take some time, while Ivy is downloading the Internet...

*Note*: if the bundle exists, it won't be re-created automatically after changes. So for now use parameter @-forceBundle@ after changing something in the Grails app: @grails run-bundle -forceBundle@

h2. How it works

In order to be a valid OSGi bundle, the application is war'ed and provided with the necessary bundle manifest headers (see @scripts/_Events.groovy@ for details).
The bundle can be created using @grails bundle@.  

The OSGi runtime is assembled in the @target/osgi@ directory and uses the "Eclipse Equinox":http://eclipse.org/equinox/ OSGi framework, Spring DM

h2. Roadmap

* make bundle generation configurable (e.g. include/exclude dependencies, ...)
* make OSGi runtime created by @grails run-bundle@ and @grails assemble-osgi-runtime@ configurable
* support auto-reloading of changed artifacts
* export main Grails beans and application context as OSGi service
* export services as OSGi service (via @static expose = 'osgi'@)
* implement deployment to "SpringSource DM Server":http://www.springsource.org/dmserver or its successor "Eclipse Virgo":http://eclipse.org/virgo/
* implement deployment to "Apache Karaf":http://karaf.apache.org/
* Spring DM has been donated to Eclipse, so it should be replaced by its successor "Eclipse Gemini":http://eclipse.org/gemini/


h2. History

h3. 0.2 (2010-07-11)

* using Spring DM instead of Pax Web as Web extender
* replaced (most) dependencies from bundle by OSGi bundles from the "SpringSource Enterprise Repository":http://www.springsource.com/repository
* provide access to OSGi @BundleContext@ to artifacts (controllers, services, ...) via Spring injection as bean @bundleContext@:
Example: controller accessing bundle context

bc. class OsgiTestController {
    def bundleContext
    def index = {
        def bundles = []
        if (bundleContext) {
            bundles = bundleContext.bundles
        }
        else {
            flash.message = "bundleContext NOT available"
        }
        [ bundles: bundles ]
    }
}


h3. 0.1 (2010-01-03)

* initial version
* uses PAX Runner to run osgi-fied Grails app
* Grails app is war'ed and extended with required OSGi bundle headers to create a single, big, monolithic bundle


